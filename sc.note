#note my key are binding
#in eg: caps bind ctrl, etc;

# iterm2
Caps + W = functionality + behavior similar with dw , u can use it in terminal or vim insert mode too;

# vimming editor(for insert mode purpose)
# begining or begin of word meaning from right to left & end of word means from left to right (the logic have concept "time" from u stand so from cursor to left for begining & vice versa ); 
x = deleting one char backward if the cursor was at the end it del to left or normal delete;
D = deleting from cursor way to end (1 block);
dd = (deleting duplicate) deleting & duplicate one line so you can p as option;
dw = delete a word from cursor to the begining spaces or symbols, break by spaces (break space not included as deleted);
de = same concept & behavior with dw from cursor but to end which mean to right;
ciw = delete a word and go insert mode;
Shift + s = deletion 1 lines then enter the insert mode;
y = copy or yank;
yy = copy or yank 1 line instant;
v = visual mode select 1 charcter from cursor;
V = visual mode select 1 block line base cursor;
p = paste;
r = replace one keyword, u can use it to with visual mode;
R = replace keyword after one to next to next and go to all next until u ESC;
v + Shift + 4 (v$) = Select from cursor and like use end key bring selection at the end of line.
Caps + [ = esc or out;
- = decrement num , base on cursor point, if cursor not point the num it will search the closer num from cursor to right;
+ = increment num, apply same behavior;
Caps + a = select all;
o = insert new line;
u = ctrl + z or back or redo;
Caps + R = reverse the redo or u;
Caps + o = back where the cursor before;
n = when use ? or / will move selection to next to back previous selection use shift; 
e = jump to end of words (punctuation considered words);
b = jump to begin of words (punctuation considered words);
w = jump by start of next words (punctuaion considered words);
W = jump by words (spaces separate words);
G = move way to bottom, u can combine with visual mode;
H/M/L = move High/Middle/Low;
[[ = move to top;
]] = move to bottom;
Caps + D = move 20 lines down;
Caps + U = move 20 lines up (carefull u can redo);
# comment /normal
gcc = comment linewise;
gbc = comment blockwise;
[count]gcc = toggles the number of line given as a prefix-count using linewise;
[count]gbc = toggles the number of line given as a prefix-count using blockwise;
# comment /visual
gc = comment linewise;
gb = comemnt blockwise;
# Folding-ufo /normal
zm = close all folding;
zr = open all folding;
K = peeking the folding(automatic distinguishes between hover docs);
Enter =  close or open the current cursor folding (automa distinguishes);
# Folding-ufo /float peeking
Caps + d = scroll down;
Caps + f = scroll up;
# lspsaga /insert
Caps + i = bring signature help when insert more like definition of functionality etc;
# lspsaga /normal
= = diagnostic jump next , to see diagnostic;
K = hover doc(documentation) not just documentation but can show what functionality write is & etc that similar;
gr = rename the same name string;
gp = peek definition;
gd = lsp finder to see like import export or we can say string contain in another files;
Caps + G = Open floating terminal; #//usually i use it for git if i want in place inside the vim to update
# lspsaga /insert
Caps + i = bring signature help when insert more like definition of functionality etc;
# git /normal
\gb = open blame window;
\go = Open file/folder in git repository;
# telescope /normal
;f = find the whole file(just file) with telescope it can jump to parent folder too all just files;
sf = search file base on root dir now same with :E vim;
;r = live grep in ur code meaning u can search like keyword to see what file contain that keyword or like insert mode like vim then u use ? or / to search but u can have preview from other files like ;f ;
\\\\ = open current buffers. buffers meaning Lists open files in current neovim instance;
;t = help tags;
;; = resume the last one;
;e = Lists Diagnostics for all open buffers;
# telescope /sf mode 
t = target current dir like mt(mark target);
y = copy file you can overwrite to;
m = move the file but must mark/selection the file or folder first;
tab = selection mode like mf mark file;
s = select or mark all items in current dir;
d = delete file;
r = rename;
c = crete new file;
o = open file dir or open file;
# when cmp(completion) + snip(snippet) /insert
Caps + e = close the completion tab;
Caps + space = mapping completion;
CR(enter) = confirm;
Caps + f = scroll +4(up) docs or description of what the auto complete text about;
Caps + d = scroll -4(down) same with Caps+f;
Caps + n or p = manual show snippet or completion words default is automatic. Caps n or p when completion show can be use as down and up while changing the word at the same time;

# zen mode
Tabs + w + o = Opens the current buffer in a new full-screen floating window doesn't mess with existing window layouts / splits;
# vimming tabs
te = create new vim tab;
tab = move between vim tab;
ss = split second vim window;
sv = split vertical vim window;
sh =  move to vim window left;
sj = move vim window down;
sk = move vim window up;
sl = move vim window right;
Space = jump/move window to window;
caps + w + ↑ = reseze vim window up;
caps + w + ↓ = resize vim window down; apply same with left & right;

# vimming mode control/normal
? = like ctrl + f for find or search;
/ = similar with ?;
:noh =  remove highlight i.e from ? or /;
:E = enter explore mode, more like folder format to explore;
:E + R = renaming file , eazy way but must on explore mode by vim;
:q! = exit without save;
:q = exit , but the condition nothing change or already save the change;
:w = write or save;
:w! = write or save but more agressive;
:a = aggresive more like sudo;
:wqa = combos save & get the fuck out here;
:wqa! = more agressive;
:s = select & changing same word at once, ( :s/textA/textB ) changing all text A to B apply same concept with rename mv, you can narrow the selection with Visual mode;
mt = to mark target in explore mode;
mf = to mark the files can do it more than one;
mc = for mark copy to the target that we have been mark;
mm = for move the mark files to the target 11/12 w mc;
R =  for renaming files;

# tmuxx
Caps + t + c = create new terminal tab tmux;
Caps + t + n = next tmux tab;
Caps + t + p = previous tmux tab;
Caps + t + , = rename tmux tab;
Caps + t + s = Move tmux tab with option & preview;
Cpas + t + t = Tmux show time in whole scree;


collorbuddyjkdahajs
ahsdjhasd
askjhdashd
hasjdhkacollorbuddyd
hasdhacollorbuddyd

